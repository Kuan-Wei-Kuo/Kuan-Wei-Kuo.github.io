<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringMVC. 猴子也學不會的系列文(3) - Aspect-Oriented Programming (AOP)</title>
      <link href="/2018/09/01/SpringMVC-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84%E7%B3%BB%E5%88%97%E6%96%87-3/"/>
      <url>/2018/09/01/SpringMVC-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84%E7%B3%BB%E5%88%97%E6%96%87-3/</url>
      <content type="html"><![CDATA[<h1 id="What-is-AOP"><a href="#What-is-AOP" class="headerlink" title="What is AOP ?"></a>What is AOP ?</h1><p>AOP只是一種概念，因此許多人會覺得聽起來非常抽象，很難理解它的意思，原先我們使用OOP時，會發現我們都是由上到下的完成一個流程，但AOP卻會Cross-cutting concern，將整個流程橫切，如安全 （Security）檢查、交易（Transaction）等系統層面的服務（Service），在一些應用程式之中常被見到安插至各個物件的處理流程之 中，這些動作在AOP的術語中被稱之為Cross-cutting concerns。</p><h2 id="AOP-concepts-概念"><a href="#AOP-concepts-概念" class="headerlink" title="AOP concepts(概念)"></a>AOP concepts(概念)</h2><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><p>Aspect最大的作用即是收集各商務物件中的crosscutting concerns。在Spring中除了使用XML設定方式，也建議可以使用Annotation方式進行開發，會較於簡單。</p><h3 id="Joinpoint"><a href="#Joinpoint" class="headerlink" title="Joinpoint"></a>Joinpoint</h3><p>Aspect在應用程式執行時加入商務流程的點或時機稱之為Joinpoint，被呼叫的時機有可能在某個方法的前面(@before)或後面(@after)，然而Joinpoint還可以讓我們取到傳入該流程的參數以及結果，也能夠攔截例外處理。</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>顧名思義，Advice將會處理有使用“around”、“before”和“after”等不同類型的通知，這部分後面看程式碼會較於清楚。</p><h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h3><p>這部分可以看成，對於哪一個class的某個method進行關聯的動作，讓Advice可以知道我們要從哪個method進行通知處理。</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>這不要翻譯成介紹，稱之為引入較為適當，在Java很不幸的我們無法動態的修改已編譯過的類別，但是Introduction卻可以讓你動態為這個以編譯過的類別進行新增功能等動作，確實是滿驚人的，不過我沒有試過，有興趣的大大歡迎試試看。</p><h3 id="Target-object"><a href="#Target-object" class="headerlink" title="Target object"></a>Target object</h3><p>一個Advice被應用的對象或目標物件，如果直接使用Target Object進行撰寫橫切點等程式碼，會發現使用這種方式進行的crosscutting concerns都是需要自己設定ProxyBean，這實在是非常麻煩，但若使用Aspect則可以達到自動代理的機制。</p><h3 id="AOP-proxy"><a href="#AOP-proxy" class="headerlink" title="AOP proxy"></a>AOP proxy</h3><p>AOP框架創建的對象，用來實現Aspect。然而Spring AOP是使用動態代理的方式進行。然後代理的理解可以看看這個從<a href="https://openhome.cc/Gossip/SpringGossip/FromProxyToAOP.html" target="_blank" rel="noopener">代理機制初探 AOP</a>，這邊有個簡單的小程式讓大快速理解代理機制。</p><h3 id="Weaving"><a href="#Weaving" class="headerlink" title="Weaving"></a>Weaving</h3><p>Advice被應用到物件上的過程稱為Weaving，在AOP中縫合的方式有幾個時間點：編譯時期（Compile time）、類別載入時期（Classload time）、執行時期（Runtime）。(取自於:<a href="https://openhome.cc/Gossip/SpringGossip/AOPConcept.html" target="_blank" rel="noopener">AOP 觀念與術語</a>)</p><h2 id="Advice-通知的類型"><a href="#Advice-通知的類型" class="headerlink" title="Advice 通知的類型"></a>Advice 通知的類型</h2><h3 id="Before-advice"><a href="#Before-advice" class="headerlink" title="@Before advice"></a>@Before advice</h3><p>在某連接點之前執行的通知，但不能令Join point停止執行，除非發生異常。</p><h3 id="After-return-advice"><a href="#After-return-advice" class="headerlink" title="@After return advice"></a>@After return advice</h3><p>在某個接點執行成功，並且返回值得時候觸發。</p><h3 id="After-throwing-advice"><a href="#After-throwing-advice" class="headerlink" title="@After throwing advice"></a>@After throwing advice</h3><p>在方法拋出異常退出時執行的通知。</p><h3 id="After-final-advice"><a href="#After-final-advice" class="headerlink" title="@After(final) advice"></a>@After(final) advice</h3><p>某個接點退出的時候執行，不管接點是否異常。</p><h3 id="Around-advice"><a href="#Around-advice" class="headerlink" title="@Around advice"></a>@Around advice</h3><p>這個功能算是滿常用的，上述的通知類型都會執行。</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">├─build.gradle</span><br><span class="line">└─src</span><br><span class="line">    ├─main</span><br><span class="line">    │  ├─java</span><br><span class="line">    │  │  └─com</span><br><span class="line">    │  │      └─spring</span><br><span class="line">    │  │          └─example</span><br><span class="line">    │  │              ├─aspect</span><br><span class="line">    │  │              │  └─UserAspect.java</span><br><span class="line">    │  │              ├─config</span><br><span class="line">    │  │              │  ├─AspectConfig.java</span><br><span class="line">    │  │              │  ├─PersistenceJpaConfig.java</span><br><span class="line">    │  │              │  ├─WebConfiguration.java</span><br><span class="line">    │  │              │  └─WebServletInitializer.java</span><br><span class="line">    │  │              ├─controller</span><br><span class="line">    │  │              │  ├─HomeController.java</span><br><span class="line">    │  │              │  └─UserController.java</span><br><span class="line">    │  │              ├─entity</span><br><span class="line">    │  │              │  └─User.java    </span><br><span class="line">    │  │              ├─repository</span><br><span class="line">    │  │              │  └─UserRepository.java</span><br><span class="line">    │  │              └─service</span><br><span class="line">    │  │                 ├─impl</span><br><span class="line">    │  │                 │  └─UserServiceImpl.java</span><br><span class="line">    │  │                 └─UserService.java</span><br><span class="line">    │  ├─resources</span><br><span class="line">    │  │  └─log4j2.xml</span><br><span class="line">    |  └─webapp</span><br><span class="line">    |     └─WEB-INF</span><br><span class="line">    |          └─views</span><br><span class="line">    |             └─home.jsp</span><br></pre></td></tr></table></figure><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></span><br><span class="line">apply <span class="string">from:</span> <span class="string">'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// Spring</span></span><br><span class="line">    <span class="keyword">def</span> springVersion = <span class="string">'5.0.1.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-webmvc'</span>, <span class="string">version:</span> <span class="string">"$&#123;springVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-orm'</span>, <span class="string">version:</span> <span class="string">"$&#123;springVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-aspects'</span>, <span class="string">version:</span> <span class="string">"$&#123;springVersion&#125;"</span></span><br><span class="line"> </span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'javax.servlet'</span>, <span class="string">name:</span> <span class="string">'jstl'</span>, <span class="string">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    providedCompile <span class="string">'javax.servlet:servlet-api:2.5'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> springData = <span class="string">'2.0.0.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework.data'</span>, <span class="string">name:</span> <span class="string">'spring-data-jpa'</span>, <span class="string">version:</span> <span class="string">"$&#123;springData&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DBCP (Connection Pool)</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.commons'</span>, <span class="string">name:</span> <span class="string">'commons-dbcp2'</span>, <span class="string">version:</span> <span class="string">"2.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Hibernate</span></span><br><span class="line">    <span class="keyword">def</span> hibernateVersion = <span class="string">'5.2.10.Final'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.hibernate'</span>, <span class="string">name:</span> <span class="string">'hibernate-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;hibernateVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> sqlVersion = <span class="string">'2.2.0'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.mariadb.jdbc'</span>, <span class="string">name:</span> <span class="string">'mariadb-java-client'</span>, <span class="string">version:</span> <span class="string">"$&#123;sqlVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> jacksonCoreVersion = <span class="string">'2.9.4'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'com.fasterxml.jackson.core'</span>, <span class="string">name:</span> <span class="string">'jackson-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;jacksonCoreVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'com.fasterxml.jackson.core'</span>, <span class="string">name:</span> <span class="string">'jackson-databind'</span>, <span class="string">version:</span> <span class="string">"$&#123;jacksonCoreVersion&#125;"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Log4j2</span></span><br><span class="line">    <span class="keyword">def</span> log4jVersion = <span class="string">'2.8.2'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-api'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-jcl'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    </span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gretty &#123;</span><br><span class="line">    httpPort = <span class="number">8080</span></span><br><span class="line">    contextPath = <span class="string">'spring.example'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserAspect-java"><a href="#UserAspect-java" class="headerlink" title="UserAspect.java"></a>UserAspect.java</h3><p>今天的主角出現了，文章開頭就介紹許多關於AOP的術語與觀念，這邊有看到@Before、@After，這兩個就是Advice通知類型，在這個Advice後面大家可以看到execution以及指定類別、方法，這邊就是Pointcut。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LogManager.getLogger(UserAspect.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* com.spring.example.service.UserService.getUsers(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBeforeV1</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"UserAspect.logBeforeV1() : "</span> + joinPoint.getSignature().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* com.spring.example.service.UserService.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBeforeV2</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"UserAspect.logBeforeV2() : "</span> + joinPoint.getSignature().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"execution(* com.spring.example.service.UserService.getUsers(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterV1</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"UserAspect.logAfterV1() : "</span> + joinPoint.getSignature().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"execution(* com.spring.example.service.UserService.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterV2</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"UserAspect.logAfterV2() : "</span> + joinPoint.getSignature().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AspectConfig-java"><a href="#AspectConfig-java" class="headerlink" title="AspectConfig.java"></a>AspectConfig.java</h3><ol><li>@Configuration 代表這是一個SpringConfig，在運行時會自動載入。</li><li>@EnableAspectJAutoProxy 開啟讓Aspect自動代理。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserAspect <span class="title">userAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserAspect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Console-View"><a href="#Console-View" class="headerlink" title="Console View"></a>Console View</h2><p>接下來我們於瀏覽器中輸入 <a href="http://localhost:8080/spring.example/users" target="_blank" rel="noopener">http://localhost:8080/spring.example/users</a> 即可於Console看到下面的畫面<br><img src="/2018/09/01/SpringMVC-猴子也學不會的系列文-3/console.view.png" width="600"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="AOP-觀念與術語"><a href="#AOP-觀念與術語" class="headerlink" title="AOP 觀念與術語"></a><a href="https://openhome.cc/Gossip/SpringGossip/AOPConcept.html" target="_blank" rel="noopener">AOP 觀念與術語</a></h2><h2 id="Aspect-Oriented-Programming-with-Spring"><a href="#Aspect-Oriented-Programming-with-Spring" class="headerlink" title="Aspect Oriented Programming with Spring"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html" target="_blank" rel="noopener">Aspect Oriented Programming with Spring</a></h2><h2 id="Spring-实践：AOP"><a href="#Spring-实践：AOP" class="headerlink" title="Spring 实践：AOP"></a><a href="http://www.importnew.com/19041.html" target="_blank" rel="noopener">Spring 实践：AOP</a></h2>]]></content>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC. 猴子也學不會的系列文(2) - Hibernate with Spring Data JPA</title>
      <link href="/2018/08/29/SpringMVC-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84%E7%B3%BB%E5%88%97%E6%96%87-2/"/>
      <url>/2018/08/29/SpringMVC-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84%E7%B3%BB%E5%88%97%E6%96%87-2/</url>
      <content type="html"><![CDATA[<h1 id="What-is-Hibernate"><a href="#What-is-Hibernate" class="headerlink" title="What is Hibernate ?"></a>What is Hibernate ?</h1><p>Hibernate擁有高效能與物件關聯的持久化的一款ORM，使用Java的人應該對於這款ORM一點都不陌生，在業界也是很常使用的。</p><h1 id="What-is-ORM"><a href="#What-is-ORM" class="headerlink" title="What is ORM ?"></a>What is ORM ?</h1><p>ORM是什麼? 其實就是Object-Relational Mapping(ORM)，主要功能為轉換程式語言中的物件與資料庫的關聯關係。</p><p>使用ORM還是比傳統JDBC方便的，如下:</p><ol><li>隱藏SQL邏輯，可以防止SQL-Injection。</li><li>無須自己實現數據庫的操作。</li><li>可以快速開發。</li><li>構造數據化結構非常方便。</li></ol><p>但使用ORM卻會犧牲效能，它會自動管理與映射這些物件以及實現複雜查詢的困難等等，因此還是要看實務上來進行使用。</p><h1 id="What-is-JPA"><a href="#What-is-JPA" class="headerlink" title="What is JPA"></a>What is JPA</h1><p>JPA是J2EE ORM的標準之一，JPA主要負責物件與資料表的映射，在JPA還沒出來前，聽說是很亂的，各種ORM各種自己的實現方式(小的我沒經歷過)。</p><h1 id="What-is-Spring-Data-JPA"><a href="#What-is-Spring-Data-JPA" class="headerlink" title="What is Spring Data JPA"></a>What is Spring Data JPA</h1><p>Spring Data JPA主要基於Hibernate所開發的一款框架，可以讓我們更為方便的使用Hibernate與JPA。</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>在上一篇文章我們展示了簡單的SpringMVC範例，接下來我們將使用該範例進行一系列的修改。</p><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">├─build.gradle</span><br><span class="line">└─src</span><br><span class="line">    ├─main</span><br><span class="line">    │  ├─java</span><br><span class="line">    │  │  └─com</span><br><span class="line">    │  │      └─spring</span><br><span class="line">    │  │          └─example</span><br><span class="line">    │  │              ├─config</span><br><span class="line">    │  │              │  ├─PersistenceJpaConfig.java</span><br><span class="line">    │  │              │  ├─WebConfiguration.java</span><br><span class="line">    │  │              │  └─WebServletInitializer.java</span><br><span class="line">    │  │              ├─controller</span><br><span class="line">    │  │              │  ├─HomeController.java</span><br><span class="line">    │  │              │  └─UserController.java</span><br><span class="line">    │  │              ├─entity</span><br><span class="line">    │  │              │  └─User.java    </span><br><span class="line">    │  │              └─repository</span><br><span class="line">    │  │                 └─UserRepository.java</span><br><span class="line">    │  ├─resources</span><br><span class="line">    │  │  └─log4j2.xml</span><br><span class="line">    |  └─webapp</span><br><span class="line">    |     └─WEB-INF</span><br><span class="line">    |          └─views</span><br><span class="line">    |             └─home.jsp</span><br></pre></td></tr></table></figure><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></span><br><span class="line">apply <span class="string">from:</span> <span class="string">'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// Spring</span></span><br><span class="line">    <span class="keyword">def</span> springVersion = <span class="string">'5.0.1.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-webmvc'</span>, <span class="string">version:</span> <span class="string">"$&#123;springVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-orm'</span>, <span class="string">version:</span> <span class="string">"$&#123;springVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'javax.servlet'</span>, <span class="string">name:</span> <span class="string">'jstl'</span>, <span class="string">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    providedCompile <span class="string">'javax.servlet:servlet-api:2.5'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> springData = <span class="string">'2.0.0.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework.data'</span>, <span class="string">name:</span> <span class="string">'spring-data-jpa'</span>, <span class="string">version:</span> <span class="string">"$&#123;springData&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DBCP (Connection Pool)</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.commons'</span>, <span class="string">name:</span> <span class="string">'commons-dbcp2'</span>, <span class="string">version:</span> <span class="string">"2.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Hibernate</span></span><br><span class="line">    <span class="keyword">def</span> hibernateVersion = <span class="string">'5.2.10.Final'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.hibernate'</span>, <span class="string">name:</span> <span class="string">'hibernate-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;hibernateVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> sqlVersion = <span class="string">'2.2.0'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.mariadb.jdbc'</span>, <span class="string">name:</span> <span class="string">'mariadb-java-client'</span>, <span class="string">version:</span> <span class="string">"$&#123;sqlVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> jacksonCoreVersion = <span class="string">'2.9.4'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'com.fasterxml.jackson.core'</span>, <span class="string">name:</span> <span class="string">'jackson-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;jacksonCoreVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'com.fasterxml.jackson.core'</span>, <span class="string">name:</span> <span class="string">'jackson-databind'</span>, <span class="string">version:</span> <span class="string">"$&#123;jacksonCoreVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Log4j2</span></span><br><span class="line">    <span class="keyword">def</span> log4jVersion = <span class="string">'2.8.2'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-api'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-jcl'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gretty &#123;</span><br><span class="line">    httpPort = <span class="number">8080</span></span><br><span class="line">    contextPath = <span class="string">'spring.example'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>這次新增了PersistenceJpaConfig、Entity、Repository等三個部份的程式碼。</p><h3 id="PersistenceJpaConfig-java"><a href="#PersistenceJpaConfig-java" class="headerlink" title="PersistenceJpaConfig.java"></a>PersistenceJpaConfig.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"com.spring.example.repository"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistenceJpaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean entityManagerFactory = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">        entityManagerFactory.setDataSource(dataSource());</span><br><span class="line">        entityManagerFactory.setPackagesToScan(<span class="string">"com.spring.example.entity"</span>);</span><br><span class="line">        </span><br><span class="line">        JpaVendorAdapter jpaVendorAdapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">        entityManagerFactory.setJpaVendorAdapter(jpaVendorAdapter);</span><br><span class="line">        </span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">"hibernate.dialect"</span>, <span class="string">"org.hibernate.dialect.MariaDBDialect"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"hibernate.show_sql"</span>, <span class="string">"true"</span>);</span><br><span class="line">        entityManagerFactory.setJpaProperties(properties);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> entityManagerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicDataSource dataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"org.mariadb.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mariadb://192.168.180.3:3306/test_db"</span>);</span><br><span class="line">        dataSource.setUsername( <span class="string">"andy"</span> );</span><br><span class="line">        dataSource.setPassword( <span class="string">"123456"</span> );</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaTransactionManager <span class="title">transactionManager</span><span class="params">(EntityManagerFactory entityManagerFactory)</span> </span>&#123;</span><br><span class="line">        JpaTransactionManager transactionManager = <span class="keyword">new</span> JpaTransactionManager();</span><br><span class="line">        transactionManager.setEntityManagerFactory(entityManagerFactory);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistenceExceptionTranslationPostProcessor <span class="title">exceptionTranslation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PersistenceExceptionTranslationPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><p>這些@Entity、@Table等等，都是JPA本身的標準，用來對應資料表的關係。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"account"</span>)</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"nickname"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccount</span><span class="params">(String account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", account="</span> + account + <span class="string">", nickname="</span> + nickname + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UserRepository-java"><a href="#UserRepository-java" class="headerlink" title="UserRepository.java"></a>UserRepository.java</h3><p>JpaRepository是Spring Data JPA幫我們實現的功能，只要這樣做，基礎的CRUD就有了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h3><p>接下來展示如何使用Repository取得資料，並且輸出成Restful API。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Browser-View"><a href="#Browser-View" class="headerlink" title="Browser View"></a>Browser View</h2><p>接下來我們於瀏覽器中輸入 <a href="http://localhost:8080/spring.example/users" target="_blank" rel="noopener">http://localhost:8080/spring.example/users</a> 即可看到下面的畫面<br><img src="/2018/08/29/SpringMVC-猴子也學不會的系列文-2/bowser.view.png" width="600"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="Hibernate-Tutorial"><a href="#Hibernate-Tutorial" class="headerlink" title="Hibernate Tutorial"></a><a href="https://www.tutorialspoint.com/hibernate/orm_overview.htm" target="_blank" rel="noopener">Hibernate Tutorial</a></h2><h2 id="Spring-Data-JPA介紹與使用"><a href="#Spring-Data-JPA介紹與使用" class="headerlink" title="Spring Data JPA介紹與使用"></a><a href="https://www.jianshu.com/p/633922bb189f" target="_blank" rel="noopener">Spring Data JPA介紹與使用</a></h2>]]></content>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC. 猴子也學不會的系列文(1) - First SpringMVC</title>
      <link href="/2018/08/21/SpringMVC-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84%E7%B3%BB%E5%88%97%E6%96%87-1/"/>
      <url>/2018/08/21/SpringMVC-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84%E7%B3%BB%E5%88%97%E6%96%87-1/</url>
      <content type="html"><![CDATA[<h1 id="What-is-Spring"><a href="#What-is-Spring" class="headerlink" title="What is Spring ?"></a>What is Spring ?</h1><p>Spring是一個lightweight(輕量級)的framework(框架)，它可以想像是各種框架的集成，因為它可以支援許多種框架，例如Struts, Hibernate, Tapestry, EJB, JSF等等，它包含幾種模組，例如IOC, AOP, DAO, Context, ORM, WEB MVC等等，不過我們第一步需要先了解IOC(控制反轉)以及Dependency Injection(依賴注入)。</p><h1 id="What-is-IOC、Dependency-Injection"><a href="#What-is-IOC、Dependency-Injection" class="headerlink" title="What is IOC、Dependency Injection ?"></a>What is IOC、Dependency Injection ?</h1><p>Spring容器實現了IOC，也是這整個框架的核心所在，容器將會創建、管理物件直到銷毀，並使用Dependency Injection(依賴注入)來管理這些物件(Bean)，然而Spring提供這兩種IOC容器，分別為BeanFactory、ApplicationContext，這兩部分的差別，後將依序簡單的探討。</p><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>這是Spring提供最簡單的IOC容器，是無法使用大部分模組的，例如AOP、Integration、Web等等，因此僅適合在有限資源的環境下使用，通常用於測試與非生產環境。</p><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>大神也推薦使用這個IOC容器，該容器繼承BeanFactory並提供了更多的功能，因此我們可以方便的使用各種模組，來幫助開發。</p><h1 id="First-SpringMVC"><a href="#First-SpringMVC" class="headerlink" title="First SpringMVC"></a>First SpringMVC</h1><p>進入正題囉!! 首先帶大家看看SpringMVC應有的檔案架構。</p><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├─build.gradle</span><br><span class="line">└─src</span><br><span class="line">    ├─main</span><br><span class="line">    │  ├─java</span><br><span class="line">    │  │  └─com</span><br><span class="line">    │  │      └─spring</span><br><span class="line">    │  │          └─example</span><br><span class="line">    │  │              ├─config</span><br><span class="line">    │  │              │  ├─WebConfiguration.java</span><br><span class="line">    │  │              │  └─WebServletInitializer.java</span><br><span class="line">    │  │              └─controller</span><br><span class="line">    │  │                 └─HomeController.java</span><br><span class="line">    │  ├─resources</span><br><span class="line">    │  │  └─log4j2.xml</span><br><span class="line">    |  └─webapp</span><br><span class="line">    |     └─WEB-INF</span><br><span class="line">    |          └─views</span><br><span class="line">    |             └─home.jsp</span><br></pre></td></tr></table></figure><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></span><br><span class="line">apply <span class="string">from:</span> <span class="string">'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// Spring</span></span><br><span class="line">    <span class="keyword">def</span> springVersion = <span class="string">'5.0.1.RELEASE'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-webmvc'</span>, <span class="string">version:</span> <span class="string">"$&#123;springVersion&#125;"</span></span><br><span class="line"> </span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'javax.servlet'</span>, <span class="string">name:</span> <span class="string">'jstl'</span>, <span class="string">version:</span> <span class="string">'1.2'</span></span><br><span class="line">    providedCompile <span class="string">'javax.servlet:servlet-api:2.5'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Log4j2</span></span><br><span class="line">    <span class="keyword">def</span> log4jVersion = <span class="string">'2.8.2'</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-core'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-api'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.apache.logging.log4j'</span>, <span class="string">name:</span> <span class="string">'log4j-jcl'</span>, <span class="string">version:</span> <span class="string">"$&#123;log4jVersion&#125;"</span></span><br><span class="line">    </span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gretty &#123;</span><br><span class="line">    httpPort = <span class="number">8080</span></span><br><span class="line">    contextPath = <span class="string">'spring.example'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="log4j2-xml"><a href="#log4j2-xml" class="headerlink" title="log4j2.xml"></a>log4j2.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="WebConfiguration-java"><a href="#WebConfiguration-java" class="headerlink" title="WebConfiguration.java"></a>WebConfiguration.java</h3><p>在該部份我們需要配置靜態資源位置以及新增一個ViewResolver實例，為何需要配置ViewResolver，主因當Controller返回ModelAndView後，DispatcherServlet會交由ViewResolver物件來作View層的相關解析，所以需要設置ViewResolver實例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.JstlView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.spring.example.**"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InternalResourceViewResolver viewResolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">        viewResolver.setViewClass(JstlView.class);</span><br><span class="line">        viewResolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">        viewResolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/resources/**"</span>).addResourceLocations(<span class="string">"/resources/"</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="WebServletInitializer-java"><a href="#WebServletInitializer-java" class="headerlink" title="WebServletInitializer.java"></a>WebServletInitializer.java</h3><p>AbstractAnnotationConfigDispatcherServletInitializer負責以下工作</p><ol><li>配置DispatcherServlet</li><li>初始化Spring MVC容器</li><li>Spring容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServletInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[] &#123; WebConfiguration.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"/"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HomeController-java"><a href="#HomeController-java" class="headerlink" title="HomeController.java"></a>HomeController.java</h3><p>當為主頁的時候輸入home.jsp<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 傳送messages至JSP</span></span><br><span class="line">        model.addAttribute(<span class="string">"messages"</span>, <span class="string">"Spring MVC Example"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="home-jsp"><a href="#home-jsp" class="headerlink" title="home.jsp"></a>home.jsp</h3><p>由上方HomeController可以看出，我們經由Model傳送messages訊息給JSP，因此我們可以於JSP檔案中將該字串取得出來。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span> pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span><br><span class="line">        &lt;title&gt;Welcome&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;messages&#125;&lt;/h1&gt; &lt;!-- 取得messages --&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Browser-View"><a href="#Browser-View" class="headerlink" title="Browser View"></a>Browser View</h2><p>接下來我們於瀏覽器中輸入 <a href="http://localhost:8080/spring.example" target="_blank" rel="noopener">http://localhost:8080/spring.example</a> 即可看到下面的畫面<br><img src="/2018/08/21/SpringMVC-猴子也學不會的系列文-1/bowser.veiw.png" width="600"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="Spring-Tutorial"><a href="#Spring-Tutorial" class="headerlink" title="Spring Tutorial"></a><a href="https://www.javatpoint.com/spring-tutorial" target="_blank" rel="noopener">Spring Tutorial</a></h2><h2 id="開源框架-Spring-Gossip"><a href="#開源框架-Spring-Gossip" class="headerlink" title="開源框架: Spring Gossip"></a><a href="https://openhome.cc/Gossip/SpringGossip/" target="_blank" rel="noopener">開源框架: Spring Gossip</a></h2><h2 id="极客学院-IoC-容器"><a href="#极客学院-IoC-容器" class="headerlink" title="极客学院 - IoC 容器"></a><a href="http://wiki.jikexueyuan.com/project/spring/ioc-containers.html" target="_blank" rel="noopener">极客学院 - IoC 容器</a></h2>]]></content>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>從Logdown搬過來</title>
      <link href="/2018/08/17/%E5%BE%9ELogdown%E6%90%AC%E9%81%8E%E4%BE%86/"/>
      <url>/2018/08/17/%E5%BE%9ELogdown%E6%90%AC%E9%81%8E%E4%BE%86/</url>
      <content type="html"><![CDATA[<h1 id="Logdown還好嗎"><a href="#Logdown還好嗎" class="headerlink" title="Logdown還好嗎?"></a>Logdown還好嗎?</h1><p>最近我也很吃驚，為什麼Logdown無法登入，所以我要搬家啦!!! 一起吃香蕉。</p>]]></content>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Install Redis on Centos7</title>
      <link href="/2018/02/01/Install-Redis-on-Centos7/"/>
      <url>/2018/02/01/Install-Redis-on-Centos7/</url>
      <content type="html"><![CDATA[<p>Redis是一個OpenSource的CacheServer，人家可是NoSQL + KeyValue概念呢! 想當然Cache有分內存、磁碟等兩種方式，要使用哪一種儲存方式全看需求。然而Redis身為一個社群活耀的OpenSource，那麼內建transactions、replication以及data structures等多樣功能肯定也是很正常的一件事情。</p><p>話不多說，進入主題，窩們今天要在centos7上面給他裝裝Redis囉!</p><h1 id="Yum-Install"><a href="#Yum-Install" class="headerlink" title="Yum Install"></a>Yum Install</h1><p>最簡單的安裝方式。</p><h2 id="Step-1-Update-yum-and-install-EPEL-repository"><a href="#Step-1-Update-yum-and-install-EPEL-repository" class="headerlink" title="Step 1. Update yum and install EPEL repository"></a>Step 1. Update yum and install EPEL repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="Step-2-Install-Redis"><a href="#Step-2-Install-Redis" class="headerlink" title="Step 2. Install Redis"></a>Step 2. Install Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br><span class="line"></span><br><span class="line"># 開機自動啟動囉!</span><br><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure><h2 id="Step-3-Configuration-redis-conf"><a href="#Step-3-Configuration-redis-conf" class="headerlink" title="Step 3. Configuration redis.conf"></a>Step 3. Configuration redis.conf</h2><p>使用這種方式安裝的設定檔可於/etc/redis.conf看到，我們需要編輯他。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/redis.conf</span><br><span class="line"></span><br><span class="line">#----加入以下資訊----#</span><br><span class="line"></span><br><span class="line">#加入對外IP，若沒有加可以於local測試，反之則無法於外面機器測試</span><br><span class="line">bind 127.0.0.1 192.168.56.101</span><br></pre></td></tr></table></figure></p><h1 id="Download-Install"><a href="#Download-Install" class="headerlink" title="Download Install"></a>Download Install</h1><p>如果你不想使用yum進行安裝的人，可以使用這個方式。</p><h2 id="Step-1-Install-necessary-packages"><a href="#Step-1-Install-necessary-packages" class="headerlink" title="Step 1. Install necessary packages"></a>Step 1. Install necessary packages</h2><p>Redis有使用到其他的Source，因此一並給他裝上去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget make gcc</span><br></pre></td></tr></table></figure></p><h2 id="Step-2-Install-Redis-1"><a href="#Step-2-Install-Redis-1" class="headerlink" title="Step 2. Install Redis"></a>Step 2. Install Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/redis</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.9.tar.gz // download</span><br><span class="line">tatar -zxvf redis-3.2.9.tar.gz -C /usr/redis --strip-components=1 // untar</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>Step 3. Install Init Redis Script<br>在這個步驟你會需要輸入redis的相關設定，那基本上我是都照預設下去跑，一直Enter。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/redis/utils</span><br><span class="line">./install_server.sh</span><br><span class="line"></span><br><span class="line"># 開機自動啟動囉!</span><br><span class="line">systemctl enable redis_6379</span><br></pre></td></tr></table></figure></p><h2 id="Step-4-Configuration-redis-conf"><a href="#Step-4-Configuration-redis-conf" class="headerlink" title="Step 4. Configuration redis.conf"></a>Step 4. Configuration redis.conf</h2><p>若是像上述直接enter安裝的你，會在/etc/redis/6379.conf發現redis設定檔，我們需要編輯他。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/redis/6379.conf</span><br><span class="line"></span><br><span class="line">#----加入以下資訊----#</span><br><span class="line"></span><br><span class="line">#加入對外IP，若沒有加可以於local測試，反之則無法於外面機器測試</span><br><span class="line">bind 127.0.0.1 192.168.56.101</span><br></pre></td></tr></table></figure></p><h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>我們就簡單測試看看，理論上會儲存成功，並且Get出123字串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli set andy &apos;123&apos;</span><br><span class="line">redis-cli get andy</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx + Tomcat Load Balance</title>
      <link href="/2018/01/20/Nginx-Tomcat-Load-Balance/"/>
      <url>/2018/01/20/Nginx-Tomcat-Load-Balance/</url>
      <content type="html"><![CDATA[<p>今天要來給大家介紹Nginx與Tomcat如何做Load Balance呢?</p><p>在這邊大家一定會想到Apache，沒錯! Apache也能使用proxy、mod_jk達到相同效果，但Apache當Load Balance Server能力並沒有Nginx還要快。那麼說Apache功能就沒了嗎?別忘記Apache功能方面比Nginx多，若今天只需要一台Load Balance Server的話，那麼可以考慮Nginx。</p><p>老實說這也是我第一次使用Nginx，單由設定proxy功能來看，Nginx相對簡單呢!話不多說，來看看我的步驟。</p><h1 id="Nginx-Setting"><a href="#Nginx-Setting" class="headerlink" title="Nginx Setting"></a>Nginx Setting</h1><h2 id="Step-1-Install-Nginx"><a href="#Step-1-Install-Nginx" class="headerlink" title="Step 1. Install Nginx"></a>Step 1. Install Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h2 id="Step-2-Open-Firewall"><a href="#Step-2-Open-Firewall" class="headerlink" title="Step 2. Open Firewall"></a>Step 2. Open Firewall</h2><p>基本上linux 0~1023的埠號都是有定義的，如下顯示的http與https分別代表80、443等兩個埠號。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><h2 id="Step-3-Start-Nginx"><a href="#Step-3-Start-Nginx" class="headerlink" title="Step 3. Start Nginx"></a>Step 3. Start Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><h2 id="Step-4-Setting-nginx-conf"><a href="#Step-4-Setting-nginx-conf" class="headerlink" title="Step 4. Setting nginx.conf"></a>Step 4. Setting nginx.conf</h2><p>我們可以修改/etc/nginx/nginx.conf設定，來達到Load Balance效果，基本上大家只需要專注在upstream以及server這兩個標籤的設定即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    </span><br><span class="line">    upstream cluster_server &#123;</span><br><span class="line">        server 192.168.56.102:8080;</span><br><span class="line">            server 192.168.56.103:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  tomcat.cluster.com;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://cluster_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Step-5-Proxy-Permission-denied"><a href="#Step-5-Proxy-Permission-denied" class="headerlink" title="Step 5. Proxy Permission denied"></a>Step 5. Proxy Permission denied</h2><p>小弟我在執行過程中遇見這個問題，那麼解決方式只要使用以下指令，打開權限即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1</span><br></pre></td></tr></table></figure></p><h2 id="Step-6-Restart-Nginx"><a href="#Step-6-Restart-Nginx" class="headerlink" title="Step 6. Restart Nginx"></a>Step 6. Restart Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h1 id="Tomcat-Setting"><a href="#Tomcat-Setting" class="headerlink" title="Tomcat Setting"></a>Tomcat Setting</h1><p>我沒有設定Tomcat呢…我只是要做最簡單的Load Balance，因此Tomcat不理他…然後Tomcat安裝方式網路上有很多!! XD</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="How-To-Install-Nginx-on-CentOS-7"><a href="#How-To-Install-Nginx-on-CentOS-7" class="headerlink" title="How To Install Nginx on CentOS 7"></a><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">How To Install Nginx on CentOS 7</a></h2><h2 id="Using-nginx-as-HTTP-load-balancer"><a href="#Using-nginx-as-HTTP-load-balancer" class="headerlink" title="Using nginx as HTTP load balancer"></a><a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">Using nginx as HTTP load balancer</a></h2><h2 id="Nginx與Apache比較"><a href="#Nginx與Apache比較" class="headerlink" title="Nginx與Apache比較"></a><a href="https://www.hellosanta.com.tw/Drupal%E7%B6%B2%E7%AB%99%E8%A8%AD%E8%A8%88/nginx%E8%88%87apache%E6%AF%94%E8%BC%83" target="_blank" rel="noopener">Nginx與Apache比較</a></h2><h2 id="13-Permission-denied-while-connecting-to-upstream-nginx"><a href="#13-Permission-denied-while-connecting-to-upstream-nginx" class="headerlink" title="(13: Permission denied) while connecting to upstream:[nginx]"></a><a href="https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx" target="_blank" rel="noopener">(13: Permission denied) while connecting to upstream:[nginx]</a></h2>]]></content>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. Bluetooth API 偵測與搜尋</title>
      <link href="/2016/06/20/Android-Bluetooth-API-%E5%81%B5%E6%B8%AC%E8%88%87%E6%90%9C%E5%B0%8B/"/>
      <url>/2016/06/20/Android-Bluetooth-API-%E5%81%B5%E6%B8%AC%E8%88%87%E6%90%9C%E5%B0%8B/</url>
      <content type="html"><![CDATA[<p>藍芽裝置，最初的步驟就是搜尋附近的裝置，這其實已經是早期的技術了，但到現在還是被廣泛使用，尤其對於物聯網來說，是非常方便的，因為目前幾乎每一支手機都有藍芽，如果產品想要串接藍芽，其實也不難，但規格要盡量一致才不會出現奇怪的問題。</p><p>通常藍芽會直接在Activity中使用，因為我們需要搭配BroadcastReceiver來做接收搜尋等動作，因此我們需要在Activtiy中建立，當然如果想要使用OOP這種寫法也可以，也只是將Code的位置擺放去其他地方。</p><h1 id="Step-1-加入Permission"><a href="#Step-1-加入Permission" class="headerlink" title="Step 1. 加入Permission"></a>Step 1. 加入Permission</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Step-2-偵測手機是否支援藍芽"><a href="#Step-2-偵測手機是否支援藍芽" class="headerlink" title="Step 2. 偵測手機是否支援藍芽"></a>Step 2. 偵測手機是否支援藍芽</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line"><span class="keyword">if</span>(mBluetoothAdapter == <span class="keyword">null</span>)</span><br><span class="line">    bluetoothList.setText(<span class="string">"您的裝置沒有支援藍芽"</span>);</span><br></pre></td></tr></table></figure><p>BluetoothAdapter我們是不需要Intance的，因為這是早已經存在的東西，手機本身就帶有Intance的BluetoothAdapter，當然很簡單的，我們如果是NULL的，很明顯裝置並沒有藍芽。</p><h1 id="Step-3-查詢藍芽是否有開啟"><a href="#Step-3-查詢藍芽是否有開啟" class="headerlink" title="Step 3. 查詢藍芽是否有開啟"></a>Step 3. 查詢藍芽是否有開啟</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</span><br><span class="line">    Intent enableIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">    startActivityForResult(enableIntent, REQUEST_ENABLE_BT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當開啟藍芽界面並完成選擇動作時，ActivityForResult這個Method就會執行，也將會回傳REQUEST_CODE，讓開發者可以判斷。對了，這一段Code建議寫在onStart內，因為我們onCreate其實不太適合做這種動作，有疑問的可以在去看看Acivity週期。</p><h1 id="Step-4-搜尋藍芽裝置"><a href="#Step-4-搜尋藍芽裝置" class="headerlink" title="Step 4. 搜尋藍芽裝置"></a>Step 4. 搜尋藍芽裝置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mBluetoothAdapter.isDiscovering())</span><br><span class="line">    mBluetoothAdapter.cancelDiscovery();</span><br><span class="line">mBluetoothAdapter.startDiscovery();</span><br></pre></td></tr></table></figure><p>如果mBluetoothAdapter正在搜尋，但使用者又點了一次按鈕之類的，我們得取消查詢再次展開查詢的動作，不然可能會造成Loop的問題。</p><h1 id="Step-5-接收藍芽裝置"><a href="#Step-5-接收藍芽裝置" class="headerlink" title="Step 5. 接收藍芽裝置"></a>Step 5. 接收藍芽裝置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(BluetoothDevice.ACTION_FOUND);</span><br><span class="line"><span class="keyword">this</span>.registerReceiver(mReceiver, filter);</span><br><span class="line"></span><br><span class="line">filter = <span class="keyword">new</span> IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);</span><br><span class="line"><span class="keyword">this</span>.registerReceiver(mReceiver, filter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayAdapter&lt;String&gt; mNewDevicesArrayAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BroadcastReceiver mReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (BluetoothDevice.ACTION_FOUND.equals(action)) &#123;</span><br><span class="line">            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</span><br><span class="line">            <span class="keyword">if</span> (device.getBondState() != BluetoothDevice.BOND_BONDED) &#123;</span><br><span class="line">                mNewDevicesArrayAdapter.add(device.getName() + <span class="string">"\n"</span> + device.getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mNewDevicesArrayAdapter.getCount() == <span class="number">0</span>) &#123;</span><br><span class="line">                String noDevices = <span class="string">"No Devices"</span>;</span><br><span class="line">                mNewDevicesArrayAdapter.add(noDevices);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>BluetoothAdapter與BluetoothDevice有提供一些StringAction，但通常都使用FOUND與FINISHED兩種為多，在搭配Receiver接收每筆所查詢到的藍芽裝置。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. SpriteImage介紹</title>
      <link href="/2016/04/24/Android-SpriteImage%E4%BB%8B%E7%B4%B9/"/>
      <url>/2016/04/24/Android-SpriteImage%E4%BB%8B%E7%B4%B9/</url>
      <content type="html"><![CDATA[<p>有些人常問我，怎一天到晚都在寫程式?</p><p>TMD肥宅我覺得還是進入主體，牢騷沒人要聽啦！看看上次發文4/1，似乎今天有點久了，最近都在修改MyChart以及製作履歷表，剛好這次履歷表有用到SpriteImage，這種東西通常都用在遊戲上面。</p><p>如果製作2D遊戲的人可能會常看到以下這種圖片<br><img src="/2016/03/01/Android-SpriteImage介紹/test2.png" width="600"><br>(圖片資源取自於<a href="http://www.gameart2d.com/freebies.html" target="_blank" rel="noopener">Game 2D Art</a>)</p><p>為的就是減少效能使用，我們把一個連續動作放在一張大圖內，使用程式碼，裁減我們所需要的部分即可，這樣我們就不用一次讀取多張圖片。</p><p>因為我這邊已經有自己寫好的類別，沒意外直接套用即可，所以就直接打上來</p><h1 id="主類別"><a href="#主類別" class="headerlink" title="主類別"></a>主類別</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpriteAnimation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Rect bitmapRect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> lastFrameChangeTime = <span class="number">0</span>; <span class="comment">//累計時間</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> frameLengthInMilliseconds = <span class="number">100</span>; <span class="comment">//更新速度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 對圖片預算，垂直與水平的框架都要計算</span></span><br><span class="line"><span class="comment">    * countFrame 為所有框架的數量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> countHorizontalFrame = <span class="number">0</span>, countVerticalFrame = <span class="number">0</span>, countFrame = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 目前運行的框架位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> currentHorizontalFrame = <span class="number">0</span>, currentVerticalFrame = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 裁減的大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> frameWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> frameHeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnUpdateListener onUpdateListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpriteAnimation</span><span class="params">(<span class="keyword">long</span> frameLengthInMilliseconds, Rect bitmapRect, <span class="keyword">int</span> frameWidth, <span class="keyword">int</span> frameHeight, <span class="keyword">int</span> countFrame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frameLengthInMilliseconds = frameLengthInMilliseconds;</span><br><span class="line">        <span class="keyword">this</span>.bitmapRect = bitmapRect;</span><br><span class="line">        <span class="keyword">this</span>.frameWidth = frameWidth;</span><br><span class="line">        <span class="keyword">this</span>.frameHeight = frameHeight;</span><br><span class="line">        <span class="keyword">this</span>.countFrame = countFrame;</span><br><span class="line"></span><br><span class="line">        countHorizontalFrame = bitmapRect.width() / frameWidth;</span><br><span class="line">        countVerticalFrame = bitmapRect.height() / frameHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> animateCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time  = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> ( time &gt; lastFrameChangeTime + frameLengthInMilliseconds) &#123;</span><br><span class="line">            lastFrameChangeTime = time;</span><br><span class="line">            currentHorizontalFrame++;</span><br><span class="line">            <span class="keyword">if</span> (currentHorizontalFrame &gt;= countHorizontalFrame) &#123;</span><br><span class="line">                currentHorizontalFrame = <span class="number">0</span>;</span><br><span class="line">                currentVerticalFrame++;</span><br><span class="line">                <span class="keyword">if</span>(currentVerticalFrame &gt;= countVerticalFrame)</span><br><span class="line">                    currentVerticalFrame = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            animateCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(onUpdateListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            onUpdateListener.onUpdate(currentHorizontalFrame, currentVerticalFrame);</span><br><span class="line">            <span class="keyword">if</span>(animateCount &gt;= countFrame) &#123;</span><br><span class="line">                currentVerticalFrame = <span class="number">0</span>;</span><br><span class="line">                currentHorizontalFrame = <span class="number">0</span>;</span><br><span class="line">                animateCount = <span class="number">0</span>;</span><br><span class="line">                onUpdateListener.end();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnUpdateListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">(<span class="keyword">int</span> currentHorizontalFrame, <span class="keyword">int</span> currentVerticalFrame)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnUpdateListener</span><span class="params">(OnUpdateListener onUpdateListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onUpdateListener = onUpdateListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrameHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frameHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrameWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frameWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCountFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> countFrame;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mSpriteAnimation = <span class="keyword">new</span> SpriteAnimation(<span class="number">100</span>, </span><br><span class="line">                    <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight()), <span class="number">192</span>, <span class="number">192</span>, <span class="number">10</span>);</span><br><span class="line">mSpriteAnimation.setOnUpdateListener(onUpdateListener);</span><br><span class="line">mSpriteAnimation.start();</span><br><span class="line"><span class="keyword">private</span> SpriteAnimation.OnUpdateListener onUpdateListener = <span class="keyword">new</span> SpriteAnimation.OnUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">(<span class="keyword">int</span> currentHorizontalFrame, <span class="keyword">int</span> currentVerticalFrame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = currentHorizontalFrame * mSpriteAnimation.getFrameWidth();</span><br><span class="line">        <span class="keyword">int</span> right = left + mSpriteAnimation.getFrameWidth();</span><br><span class="line">        <span class="keyword">int</span> top = currentVerticalFrame * mSpriteAnimation.getFrameHeight();</span><br><span class="line">        <span class="keyword">int</span> bottom = top + mSpriteAnimation.getFrameHeight();</span><br><span class="line">        srcRect.set(left, top, right, bottom); <span class="comment">//更新剪裁位置</span></span><br><span class="line">        canvas.drawBitmap(runBitmap, srcRect, dstRect, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. View的水平與慣性移動</title>
      <link href="/2016/04/01/Android-View%E7%9A%84%E6%B0%B4%E5%B9%B3%E8%88%87%E6%85%A3%E6%80%A7%E7%A7%BB%E5%8B%95/"/>
      <url>/2016/04/01/Android-View%E7%9A%84%E6%B0%B4%E5%B9%B3%E8%88%87%E6%85%A3%E6%80%A7%E7%A7%BB%E5%8B%95/</url>
      <content type="html"><![CDATA[<p>猶如前幾天所發布的開源圖表套件，有嘗試的人應該會發現移動怪怪的，這部分確實當初並沒有對於這部分下功夫，所以我今天給他更改了一下，達到我們所想要的滑動效果。</p><p>今天比較平穩的Po文，因為我好累，懶得靠北太多程式的東西，但還是得分享分享。</p><p>首先我們得了解兩大Class，分別為Scroller與VelocityTracker，前者為滑動效果，後者為手勢速度，看到上述的物件應該都明白我們將之搭配起來，來讓我們有高級滑動的效果！</p><h1 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h1><p>它不是物件，簡單的來說，它可以計算精確的滑動位置，讓我們使用這些數據做運用。<br>它包含了各種滑動的運算，當然我們通常都只用到其中幾種。</p><h1 id="VelocityTracker"><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h1><p>這Class通常放在OnTouch觸發的狀態下，記錄當前手勢的移動位置與計算速度。</p><p>接下來以一個簡單的範例來說明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomView</span> <span class="title">extands</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCROLL_MODE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLING_MODE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> SCROLLER_MODE = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Scroller mScroller;</span><br><span class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScaledMinimumFlingVelocity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScaledMaximumFlingVelocity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> offestX, offestY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">        mScroller = <span class="keyword">new</span> Scroller(context);</span><br><span class="line">        mViewConfiguration = ViewConfiguration.get(context);</span><br><span class="line">        mScaledMinimumFlingVelocity = mViewConfiguration.getScaledMinimumFlingVelocity();</span><br><span class="line">        mScaledMaximumFlingVelocity = mViewConfiguration.getScaledMaximumFlingVelocity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">obtainVelocityTracker</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseVelocityTracker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker.recycle();</span><br><span class="line">            mVelocityTracker = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        obtainVelocityTracker(event); <span class="comment">//每次動作都得運算</span></span><br><span class="line">        <span class="keyword">switch</span>(event.getAction) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                offestX = curLeft - event.getX();</span><br><span class="line">                offestY = curTop - event.getY();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                SCROLLER_MODE = SCROLL_MODE;</span><br><span class="line">                mScroller.startScroll((<span class="keyword">int</span>) event.getX(), (<span class="keyword">int</span>) event.getY(),</span><br><span class="line">                    (<span class="keyword">int</span>) offestX, (<span class="keyword">int</span>) offestY, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                SCROLLER_MODE = FLING_MODE;</span><br><span class="line">                <span class="keyword">int</span> initialVelocity = (<span class="keyword">int</span>) mVelocityTracker.getXVelocity();</span><br><span class="line">                mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>, mScaledMaximumFlingVelocity);</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(initialVelocity) &gt; mScaledMinimumFlingVelocity) &#123;</span><br><span class="line">                    <span class="comment">// 這個方法不難看出，Scroller與VelocityTracker的緊密結合。</span></span><br><span class="line">                    mScroller.fling((<span class="keyword">int</span>) curLeft, (<span class="keyword">int</span>) curTop,</span><br><span class="line">                                (<span class="keyword">int</span>) mVelocityTracker.getXVelocity(), (<span class="keyword">int</span>) mVelocityTracker.getYVelocity(),</span><br><span class="line">                                minX, maxX, minY, maxY);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 釋放VelocityTracker資源</span></span><br><span class="line">                releaseVelocityTracker();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果沒有Invalidate狀態，Scroller是不會運作的，更不會運作computeScroll()</span></span><br><span class="line">        ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 這方法很明顯的就是要我們自行去計算Sroller所給予的數值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *將兩種不同數據分開的原因為，我們Scroll更新速度快，因此直接用最終結果</span></span><br><span class="line"><span class="comment">        *然而Fling算是一種動畫效果，因此在ACTION_UP時會有這個動畫，這時候就需要使用當前數據。    </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(SCROLLER_MODE == SCROLL_MODE) &#123;</span><br><span class="line">            curLeft = mScroller.getFinalX();</span><br><span class="line">            curTop = mScroller.getFinalY():</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curLeft = mScroller.getCurrX();</span><br><span class="line">            curTop = mScroller.getCurrY();</span><br><span class="line">        &#125;</span><br><span class="line">        ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧！　今天下課了，看起來沒有很複雜，如果想有更棒的效果，<br>對於Scroller與VelocityTracker的了解是不可或缺的，除非你想自己寫Buffer &gt;\&lt;</p><p>程式碼只是把部分打出來，所以可能不能直接套用，自己先嘗試看看吧！</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. MyChartLib 圖表系統</title>
      <link href="/2016/03/28/Android-MyChartLib-%E5%9C%96%E8%A1%A8%E7%B3%BB%E7%B5%B1/"/>
      <url>/2016/03/28/Android-MyChartLib-%E5%9C%96%E8%A1%A8%E7%B3%BB%E7%B5%B1/</url>
      <content type="html"><![CDATA[<h1 id="New-Update-目前更新可以讓ViewPager-與-ScrollView三者結合"><a href="#New-Update-目前更新可以讓ViewPager-與-ScrollView三者結合" class="headerlink" title="New Update. 目前更新可以讓ViewPager 與 ScrollView三者結合"></a>New Update. 目前更新可以讓ViewPager 與 ScrollView三者結合</h1><p><br></p><h1 id="長條圖"><a href="#長條圖" class="headerlink" title="長條圖"></a>長條圖</h1><p><img src="/2016/03/28/Android-MyChartLib-圖表系統/columnChartView.png" width="300"></p><h1 id="摺線圖"><a href="#摺線圖" class="headerlink" title="摺線圖"></a>摺線圖</h1><p><img src="/2016/03/28/Android-MyChartLib-圖表系統/lineChartView.png" width="300"></p><h1 id="圓餅圖"><a href="#圓餅圖" class="headerlink" title="圓餅圖"></a>圓餅圖</h1><p><img src="/2016/03/28/Android-MyChartLib-圖表系統/pieChartView.png" width="300"></p><h1 id="GitHub-SourceCode"><a href="#GitHub-SourceCode" class="headerlink" title="GitHub SourceCode"></a><a href="https://github.com/Kuan-Wei-Kuo/MyChart" target="_blank" rel="noopener">GitHub SourceCode</a></h1><p><br></p><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 這邊長寬高可以自行設定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com.kuo.mychartlib.view.ColumnChartView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/columnChartView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;ColumnData&gt; <span class="title">computeColumnData</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> maxValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] colors = &#123;ChartRendererUntil.CHART_GREEN, ChartRendererUntil.CHART_PINK,</span><br><span class="line">    ChartRendererUntil.CHART_RED, ChartRendererUntil.CHART_YELLOW, ChartRendererUntil.CHART_BROWN,</span><br><span class="line">    ChartRendererUntil.CHART_ORANGE, ChartRendererUntil.CHART_GREY,</span><br><span class="line">    ChartRendererUntil.CHART_PURPLE&#125;;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ColumnData&gt; test = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++) &#123;</span><br><span class="line">        test.add(<span class="keyword">new</span> ColumnData(<span class="string">"Axis X"</span>,</span><br><span class="line">        random.nextInt(maxValue), colors[random.nextInt(colors.length)]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br><span class="line">columnChartView.setColumnData(computeColumnData(size, maxValue));</span><br></pre></td></tr></table></figure><h3 id="UpdateChart"><a href="#UpdateChart" class="headerlink" title="UpdateChart"></a>UpdateChart</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">columnChartView.setColumnData(computeColumnData(size, maxValue));</span><br><span class="line"><span class="comment">// updateChart() 方法為更新用</span></span><br><span class="line">columnChartView.upadteChart();</span><br></pre></td></tr></table></figure><p>目前我覺得方法這邊還可以在改一下，updateChart()這邊有點難以與一般的Lib雷同，起因是因為每次更改都得查看是否有更改View大小，防止錯誤。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 讓Spinner Item可重複(Repeat)點擊</title>
      <link href="/2016/03/01/Android-%E8%AE%93Spinner-Item%E5%8F%AF%E9%87%8D%E8%A4%87-Repeat-%E9%BB%9E%E6%93%8A/"/>
      <url>/2016/03/01/Android-%E8%AE%93Spinner-Item%E5%8F%AF%E9%87%8D%E8%A4%87-Repeat-%E9%BB%9E%E6%93%8A/</url>
      <content type="html"><![CDATA[<p>Spinner是一種簡單的選單，但通常我們都只是簡單應用，並沒有做太多的改變，但我看到某些APP可以重複點擊耶！我也TMD很有事的研究了一下。</p><p>先說好我只Po KeyCode，其餘的自己想辦法應用啦~我可是跟Google研究很久耶!((被踹飛<br>如果你想讓Spinner Item可以重複點擊，那麼就用下面這個囉！</p><h1 id="修改Spinner-SourceCode"><a href="#修改Spinner-SourceCode" class="headerlink" title="修改Spinner SourceCode"></a>修改Spinner SourceCode</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field field = AdapterView.class.getDeclaredField(<span class="string">"mOldSelectedPosition"</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    field.setInt(spinner_nav, AdapterView.INVALID_POSITION);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你有稍微研究一下SourceCode你會看到mOldSelectedPosition是怎樣的角色，當ItemPosition被記錄到mOldSelectedPosition的時候，代表我們已經點擊過，這時候他們就不會給你點擊，所以我們透過修改mOldSelectedPositio，讓他保持初始，這樣我們就可以瘋狂重複點擊啦！</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 關於RecyclerView自適應高、寬(WrapContent)的方法</title>
      <link href="/2016/02/20/Android-%E9%97%9C%E6%96%BCRecyclerView%E8%87%AA%E9%81%A9%E6%87%89%E9%AB%98%E3%80%81%E5%AF%AC-WrapContent-%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2016/02/20/Android-%E9%97%9C%E6%96%BCRecyclerView%E8%87%AA%E9%81%A9%E6%87%89%E9%AB%98%E3%80%81%E5%AF%AC-WrapContent-%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>我們要知道一件事情啦！ RecyclerView沒有對於Item做任何的改變，簡單的說，我們的Layout編排，都是靠LayoutManager去做修改，因此我們需要對於LayoutManager做運算。</p><p>所以我們得手動更改onMeasure，以下為LinearLayoutManager做範例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapContentLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayoutManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapContentLinearLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapContentLinearLayout</span><span class="params">(Context context, <span class="keyword">int</span> orientation, <span class="keyword">boolean</span> reverseLayout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, orientation, reverseLayout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WrapContentLinearLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state, <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">        View view = recycler.getViewForPosition(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line">            measureChild(view, widthSpec, heightSpec); <span class="comment">//計算View的高寬</span></span><br><span class="line">            <span class="keyword">int</span> measuredWidth = getItemCount() * view.getMeasuredWidth() &gt; View.MeasureSpec.getSize(widthSpec) ? View.MeasureSpec.getSize(widthSpec) : getItemCount() * view.getMeasuredWidth();</span><br><span class="line">            <span class="keyword">int</span> measuredHeight = view.getMeasuredHeight();</span><br><span class="line">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果全部的ItemView寬度大於RecyclerView的寬度就使用原先的寬度，反之就使用我們ItemView的寬度，如此一來就解決了。</p><p>然後就…江…上面這方法聽說不是很準確的抓到高寬度，但我覺得夠用了！反正使用者又看不太出來(感覺要被打了…)。</p><p>以上為今日不負責任教學講座，請看好看滿。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 使用ValueAnimator令顏色漸變轉換</title>
      <link href="/2016/02/05/Android-%E4%BD%BF%E7%94%A8ValueAnimator%E4%BB%A4%E9%A1%8F%E8%89%B2%E6%BC%B8%E8%AE%8A%E8%BD%89%E6%8F%9B/"/>
      <url>/2016/02/05/Android-%E4%BD%BF%E7%94%A8ValueAnimator%E4%BB%A4%E9%A1%8F%E8%89%B2%E6%BC%B8%E8%AE%8A%E8%BD%89%E6%8F%9B/</url>
      <content type="html"><![CDATA[<p>大家好 大gay嚇 摳擬機挖，肥宅今天來分享一下如何取得連續漸變的顏色呢!?在目前手機的發達上，UX的顧慮也是特別重要，因此我們發現動作效果是不是更多了?</p><p>沒錯，以前只要切來切去，現在就是要有一點順暢的切換，毫無為何感的fu，所以我們常常要使用一些動畫來輔助一下，因此，所以，也就是我們不可以不學習這東西囉！</p><p>其實Value簡單的說就是數值，這個東東可以讓數值漸變，由0~100之類的慢慢轉換。</p><p><img src="http://developer.android.com/images/animation/animation-nonlinear.png" width="600"><br>(圖片取自Google)</p><p>然而我們的Value預設下是使用非線性的樣子去做變換，因此會像上圖那樣。<br>使用方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> colorFrom = Color.RED;</span><br><span class="line"><span class="keyword">int</span> colorTo = Color.BLUE;</span><br><span class="line">ValueAnimator colorAnimation = ValueAnimator.ofObject(<span class="keyword">new</span> ArgbEvaluator(), colorFrom, colorTo);</span><br><span class="line">colorAnimation.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animator)</span> </span>&#123;</span><br><span class="line">        toolbar.setBackgroundColor((<span class="keyword">int</span>) animator.getAnimatedValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">colorAnimation.setDuration(<span class="number">300</span>); <span class="comment">//設定速度</span></span><br><span class="line">colorAnimation.start();</span><br></pre></td></tr></table></figure></p><p>要記得加入AnimatorUpdateListener監聽我們的動畫運行以及取得目前的Value，來達到漸變切換的感覺。Animator的應用實在是非常多，我想簡單介紹即可，如果要在更深入使用，就在說吧！</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 自製剪裁圖片元件 CropImageView</title>
      <link href="/2016/01/30/Android-%E8%87%AA%E8%A3%BD%E5%89%AA%E8%A3%81%E5%9C%96%E7%89%87%E5%85%83%E4%BB%B6-CropImageView/"/>
      <url>/2016/01/30/Android-%E8%87%AA%E8%A3%BD%E5%89%AA%E8%A3%81%E5%9C%96%E7%89%87%E5%85%83%E4%BB%B6-CropImageView/</url>
      <content type="html"><![CDATA[<p>這次分享簡單的剪裁圖片方式，我還沒做成Library，還滿懶惰的…((被踹飛</p><p>大家可以參考參考，程式碼方面不難，反正就一堆 ? : if else 的判定。</p><p>不過這次做起來有點瑕疵，在剪裁時候，有些許的不準確，目前判斷是因為Bitmap大小與剪裁不符合，大家可能都會想說，不是用Canvas去畫Bitmap嗎? No no ~ 我盡量不去使用Canvas去畫Bitmap，每次更新時都得在畫一次Bitmap，這是多麼恐怖的事情，你會非常Lag，效能之差，所以我直接使用ImageView.setImageBitmap。</p><p>當然這並不算是我第一次製作此類，在先前的項目就有使用過，但並未認真去抓取一些Bug，所以有時候會有些錯誤。</p><p>然而這次我將外圍、伸縮剪裁框等，小瑕疵都修改完畢，因此應該是不會發生瑕疵的問題了。</p><p>大家有興趣可以去GitHub看看，記得不要看在學時期的Project就別看了，很丟臉…((淚灑</p><p>P.S.也許有人說，我的藍點怎麼只有一個，應該四面八方都要有呀！ 我就是懶，我懶我驕傲!! ((又飛走</p><p><img src="/2016/01/30/Android-自製剪裁圖片元件-CropImageView/Screenshot_2016-01-30-14-19-52.png" width="300"><br><img src="/2016/01/30/Android-自製剪裁圖片元件-CropImageView/Screenshot_2016-01-30-14-20-02.png" width="300"></p><h1 id="GitHub-SourceCode"><a href="#GitHub-SourceCode" class="headerlink" title="GitHub SourceCode"></a><a href="https://github.com/Kuan-Wei-Kuo/PhotoDesign" target="_blank" rel="noopener">GitHub SourceCode</a></h1>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 猴子也學不會的SQLite(3)</title>
      <link href="/2016/01/18/Android-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84SQLite-3/"/>
      <url>/2016/01/18/Android-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84SQLite-3/</url>
      <content type="html"><![CDATA[<p>有時候會因應一些需求，需要修改資料庫欄位設計，這時候SQLite稍嫌不太方便，需要利用onUpgrade方法，進行ALTER動作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DATE = <span class="string">"date"</span>; <span class="comment">//欄位名稱</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(newVersion &gt; oldVersion) &#123;</span><br><span class="line">        sqLiteDatabase.beginTransaction();</span><br><span class="line">    <span class="keyword">if</span>(oldVersion == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 新增一個日期欄位，預設為NULL字串</span></span><br><span class="line">            sqLiteDatabase.execSQL(<span class="string">"ALTER TABLE "</span> + INFO_TABLE + <span class="string">" ADD COLUMN "</span> + DATE + <span class="string">" TEXT DEFAULT "</span> + <span class="string">"NULL"</span>;</span><br><span class="line">            Log.d(<span class="string">"SQLite"</span>, <span class="string">"版本更新成功，結束交易..."</span>);</span><br><span class="line">            sqLiteDatabase.setTransactionSuccessful();</span><br><span class="line">            sqLiteDatabase.endTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">"SQLite"</span>, <span class="string">"版本更新失敗，結束交易..."</span>);</span><br><span class="line">            sqLiteDatabase.endTransaction();</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onCreate(sqLiteDatabase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上述程式碼可以看出我們新增需要自己去編寫程式碼，就是這麼簡單，但SQLite是放在使用者的地方，因此也不建議大量更新資料庫。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 猴子也學不會的SQLite(2)</title>
      <link href="/2016/01/10/Android-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84SQLite-2/"/>
      <url>/2016/01/10/Android-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84SQLite-2/</url>
      <content type="html"><![CDATA[<p>在上一篇文章想必大家都建立好了一個資料庫(檔案型)，那麼接下來就是重頭戲了，如何新增、修改、刪除以及取得資料等動作呢?</p><h1 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insterInfo</span><span class="params">(SQLiteDatabase db, String name, String phone)</span> </span>&#123;</span><br><span class="line">    ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    contentValues.put(NAME, name);</span><br><span class="line">    contentValues.put(PHONE, phone);</span><br><span class="line"></span><br><span class="line">    db.insert(INFO_TABLE, <span class="keyword">null</span>, contentValues);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一章節我們建立了INFO TABLE，內部欄位為RowId, Name, Phone，但因RowId每次自動累加，因此不需在新增一次。</p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateInfo</span><span class="params">(SQLiteDatabase db, String rowId, String name, String phone)</span> </span>&#123;</span><br><span class="line">    ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    contentValues.put(NAME, name);</span><br><span class="line">    contentValues.put(PHONE, phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//問號對應到後面陣列的資料</span></span><br><span class="line">    db.update(INFO_TABLE, contentValues, ROW_ID + <span class="string">"=?"</span>, <span class="keyword">new</span> String[] &#123;rowId&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改部分與新增大同小異，唯一不同的就是多了個RowId，這個欄位是我們主要索引值，當RowId = 1時，那麼我們將會把新的資料塞進去第一筆資料當中，以此類推。</p><h1 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeInfo</span><span class="params">(SQLiteDatabase db, String rowId)</span> </span>&#123;</span><br><span class="line">    db.delete(INFO_TABLE, ROW_ID + <span class="string">"=?"</span>, <span class="keyword">new</span> String[]&#123;rowId&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用PK值進行刪除，如果想要多欄位刪除的話，需要自行設計，方法雷同。</p><h1 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">getInfO</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  db.query(INFO_TABLE, <span class="keyword">new</span> String[] &#123;ROW_ID, NAME, PHONE&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回傳值是Cursor物件，我們看看Cursor物件的使用方式</p><h2 id="Cursor使用方法"><a href="#Cursor使用方法" class="headerlink" title="Cursor使用方法"></a>Cursor使用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MySQLiteManager mSQLiteManager = <span class="keyword">new</span> MySQLiteManager(<span class="keyword">this</span>);</span><br><span class="line">Cursor mCursor = mSQLiteManager.getInfo(mSQLiteManager.getReadableDatabase());</span><br><span class="line"><span class="keyword">if</span>(mCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">    mCursor.moveToFirst();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; mCursor.getCount() ; i++) &#123;</span><br><span class="line">        <span class="comment">//Do Something</span></span><br><span class="line">        mCursor.moverToNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了今天就到這邊，其實也就是一般的SQL操作而已。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 猴子也學不會的SQLite(1)</title>
      <link href="/2016/01/04/Android-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84SQLite-1/"/>
      <url>/2016/01/04/Android-%E7%8C%B4%E5%AD%90%E4%B9%9F%E5%AD%B8%E4%B8%8D%E6%9C%83%E7%9A%84SQLite-1/</url>
      <content type="html"><![CDATA[<p>各位道友，貧道今天來分享一下魯魯der文章，在大家踏入這個Android開發以後，會發現其實SQLite在Android其實很常使用。</p><p>接下來就簡約介紹一下SQLite。</p><ol><li><p>SQLite的優點<br>(1) 體積小，適用於一些簡單的應用也方便攜帶<br>(2) 在多讀少寫的情況下，讀取速度甚至優於MySQL<br>(3) 可以橫跨多種平台<br>(4) SQLite為檔案型資料庫，要備份直接Copy一個檔案就好。<br>(5) 支援多種語言</p></li><li><p>SQLite的缺點<br>(1) 容量受限<br>(2) 許多功能相較於一般資料庫來的少</p></li></ol><p>其實SQLite的優點是大於缺點的，但對於大數據的情況下，SQLite是沒有辦法與知名資料庫比較的。更應該說，他們是不同領域下的佼佼者，在手機、嵌入式等等的小型系統，是非常受用的，反之。</p><p>那麼我們接下來教學將會以Android為主軸，來設計SQLite。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLiteManager</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 資料庫版本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//資料庫名稱，附檔名為db</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_NAME = <span class="string">"MySQLite.db"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//資料表名稱</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String INFO_TABLE = <span class="string">"info_table"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ROW_ID = <span class="string">"rowId"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String NAME = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PHONE = <span class="string">"phone"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySQLiteManager</span> <span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每次使用將會檢查是否有無資料表，若無，則會建立資料表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//SQLite 所支援屬性帳面上的不多，但事實上也是能夠讀取一些其它屬性</span></span><br><span class="line">        String createTable = <span class="string">"CREATE TABLE "</span> + INFO_TABLE+ <span class="string">" ("</span></span><br><span class="line">                          + ROW_ID + <span class="string">" INTEGER PRIMARY KEY AUTOINCREMENT, "</span> + NAME + <span class="string">" TEXT, "</span> + PHONE + <span class="string">" TEXT);"</span>;</span><br><span class="line">        db.execSQL(createTable);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> i, <span class="keyword">int</span> i2)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就可以建立出一個簡單的資料表了，大家不仿可以嘗試看看，<br>第一章節比較無聊與簡單，後面將會慢慢精彩起來，這也是必經過程，加油！</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 使用getIdentifier獲取資源ID</title>
      <link href="/2015/12/29/Android-%E4%BD%BF%E7%94%A8getIdentifier%E7%8D%B2%E5%8F%96%E8%B3%87%E6%BA%90ID/"/>
      <url>/2015/12/29/Android-%E4%BD%BF%E7%94%A8getIdentifier%E7%8D%B2%E5%8F%96%E8%B3%87%E6%BA%90ID/</url>
      <content type="html"><![CDATA[<p>最近在開發App的時候發現一個問題，如果我們早先就將Image的位置放入SQLite，然後加入新的Image位置，發現會產生id錯亂的問題，這問題其實也就只是因為我們加入新的Image而產生的，因為每加入新的圖片，可能就會造成id的從新編排。</p><p>那避免方法其實很簡單，方法如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name 這邊請填入我們所想要的id名稱 (ex:ic_luncher)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> defType 填入我們想要在哪個資料夾尋找上述的id名稱 (ex:mipmap)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> defPackage 想要從哪個Package取得上述的內容</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">getResources().getIdentifier(String name, String defType, String defPackage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> resId = getResources().getIdentifier(<span class="string">"ic_luncher"</span>, <span class="string">"mipmap"</span>, getPackageName());</span><br></pre></td></tr></table></figure></p><p>其實就這麼簡單而已，這樣也不怕因為更新圖片而導致id位置錯亂。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. Export from sqlite to excel</title>
      <link href="/2015/12/21/Android-Export-from-sqlite-to-excel/"/>
      <url>/2015/12/21/Android-Export-from-sqlite-to-excel/</url>
      <content type="html"><![CDATA[<p>最近剛好有學習到如何將SQLite的資料拉出來建立一個Excel在手機上。</p><h1 id="下載Jexcel-jar"><a href="#下載Jexcel-jar" class="headerlink" title="下載Jexcel.jar"></a>下載<a href="http://www.java2s.com/Code/Jar/j/Downloadjxljar.htm" target="_blank" rel="noopener">Jexcel.jar</a></h1><h1 id="建立AsyncTask"><a href="#建立AsyncTask" class="headerlink" title="建立AsyncTask"></a>建立AsyncTask</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportDatabaseExcelTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這個可以快速顯示一個Progress</span></span><br><span class="line">    <span class="keyword">private</span> ProgressDialog progressDialog; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExportDatabaseExcelTask</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        progressDialog = <span class="keyword">new</span> ProgressDialog(context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">        progressDialog.setMessage(<span class="string">"正在匯出Excel檔"</span>);</span><br><span class="line">        progressDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPostExecute(aBoolean);</span><br><span class="line">        <span class="keyword">if</span>(progressDialog.isShowing())</span><br><span class="line">            progressDialog.dismiss();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!aBoolean)</span><br><span class="line">            Toast.makeText(context, <span class="string">"匯出失敗"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 創立Excel的檔名</span></span><br><span class="line">        String fileName = <span class="string">"Test"</span> + <span class="string">".xls"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 選擇要匯出的Table</span></span><br><span class="line">        SQLiteManager sqLiteManager = <span class="keyword">new</span> SQLiteManager(context);</span><br><span class="line">        SQLiteDatabase db = sqLiteManager.getReadableDatabase();</span><br><span class="line">        Cursor cursor = db.rawQuery(<span class="string">"SELECT * FROM "</span> + CurrentAccountData.getMoneyTableName(), <span class="keyword">null</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 將會在內部空間內建立一個資料夾</span></span><br><span class="line">        File exportDir = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getPath(), <span class="string">"TestExport"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!exportDir.exists())</span><br><span class="line">            exportDir.mkdirs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在TestExport下創建一個檔案</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(exportDir, fileName);</span><br><span class="line">        </span><br><span class="line">        /設定輸出相關格式</span><br><span class="line">        WorkbookSettings wbSettings = <span class="keyword">new</span> WorkbookSettings();</span><br><span class="line">        wbSettings.setLocale(<span class="keyword">new</span> Locale(<span class="string">"en"</span>, <span class="string">"EN"</span>));</span><br><span class="line">        WritableWorkbook workbook;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 創立一個Excel檔</span></span><br><span class="line">            workbook = Workbook.createWorkbook(file, wbSettings);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 建立分頁</span></span><br><span class="line">            WritableSheet sheet = workbook.createSheet(CurrentAccountData.getAccountName(), <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 如果要建立第二分頁就會像 workbook.createSheet(CurrentAccountData.getAccountName(), 1);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//先建立我們Excel的標題</span></span><br><span class="line">            sheet.addCell(<span class="keyword">new</span> Label(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"學號"</span>));</span><br><span class="line">            sheet.addCell(<span class="keyword">new</span> Label(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"姓名"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//開始放入表的資料，這邊請都用getString()</span></span><br><span class="line">            <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = cursor.getPosition() + <span class="number">1</span>;</span><br><span class="line">                    sheet.addCell(<span class="keyword">new</span> Label(<span class="number">0</span>, i, cursor.getString(<span class="number">0</span>)));</span><br><span class="line">                    sheet.addCell(<span class="keyword">new</span> Label(<span class="number">1</span>, i, cursor.getString(<span class="number">1</span>)));</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">while</span> (cursor.moveToNext());</span><br><span class="line">            &#125;</span><br><span class="line">            cursor.close();</span><br><span class="line">            workbook.write();</span><br><span class="line">            workbook.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;  <span class="keyword">catch</span> (RowsExceededException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WriteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done！<br>其實不管是Csv還是Excel最終都還是得將Table的資料一一取出來，然後再使用迴圈建立資料，因此使用AsnyTask是有其道理的，有人會說怎麼不使用Thread、Handler，其實效果大同小異。</p><p>但AsnyTask是為了Android而產生的，它在Android比上述兩個速度更快，美中不足的是沒辦法像Thread可以運算非常大量的資料。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. MVP的簡單介紹與使用</title>
      <link href="/2015/11/19/Android-MVP%E7%9A%84%E7%B0%A1%E5%96%AE%E4%BB%8B%E7%B4%B9%E8%88%87%E4%BD%BF%E7%94%A8/"/>
      <url>/2015/11/19/Android-MVP%E7%9A%84%E7%B0%A1%E5%96%AE%E4%BB%8B%E7%B4%B9%E8%88%87%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>關於這篇文章的發表，個人其實也非常忐忑，但卻始終忍不住與大家一起探討這些問題。</p><p>自從MVP問世以後，Android開發者中已經掀起了許多看法，也因每個人的看法不同，所以我想在此發表自己的看法，並且與各位討論！</p><p>MVP 與 MVC 的選擇是如何? 我想很多人其實也很疑惑，但我相信新手們肯定都不知道這兩個是什麼?</p><h1 id="淺談MVC"><a href="#淺談MVC" class="headerlink" title="淺談MVC"></a>淺談MVC</h1><h2 id="經典模式中的MVC"><a href="#經典模式中的MVC" class="headerlink" title="經典模式中的MVC"></a>經典模式中的MVC</h2><img src="/2015/11/19/Android-MVP的簡單介紹與使用/MVC_ICON.jpg"><h2 id="事實上MVC會變成"><a href="#事實上MVC會變成" class="headerlink" title="事實上MVC會變成"></a>事實上MVC會變成</h2><img src="/2015/11/19/Android-MVP的簡單介紹與使用/Usual_MVC.jpg"><p>大家應該可以看到第二張圖中的虛線，沒錯，我們MVC通常會變成這樣，因為當我們Model完成時，該如何溝通View?</p><p>除非我們讓View也可讓Model溝通，但這卻又不符合MVC的初始原則，也造就了現在許多人對於MVC的說法各種不一。</p><p>我也只能夠確定一點，MVC這一詞只會越來越亂，因為許多工程師都有自己對於MVC的看法。</p><h1 id="淺談MVP"><a href="#淺談MVP" class="headerlink" title="淺談MVP"></a>淺談MVP</h1><img src="/2015/11/19/Android-MVP的簡單介紹與使用/MVP_ICON.jpg"><p>MVP其實就是由MVC所演變而來，從圖上可知道，View與Model靠著Presenter做溝通，兩者間並無法直接溝通，這樣的架構好處就是，當Model修改時，只要我們最後的數據型態是相同的，View就不需要修改。</p><p>在Android方面，Activity(Fragment)可以稱為是Controller、View，兩者都是，如果使用MVC這種模式，我認為對於程式的撰寫是非常不易的，因此也認為MVP的架構對於Android，是相對有利的。</p><h1 id="為什麼要使用"><a href="#為什麼要使用" class="headerlink" title="為什麼要使用"></a>為什麼要使用</h1><p>不論MVP與MVC兩者間都會讓程式上較於複雜，但如果理解這些模式的人，應該會更加容易明白這些位置的作用。也因為如此，這兩種架構都不適用於小型程式，畢竟只有大量的程式碼，才能夠讓他們發揮真正的作用。</p><ol><li>模組、介面權責劃分明顯</li><li>模組可重複使用</li><li>增加靈活性</li><li>降低依賴性</li></ol><h1 id="MVP的使用方法"><a href="#MVP的使用方法" class="headerlink" title="MVP的使用方法"></a>MVP的使用方法</h1><h2 id="建立Presenter與Model的監聽器"><a href="#建立Presenter與Model的監聽器" class="headerlink" title="建立Presenter與Model的監聽器"></a>建立Presenter與Model的監聽器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnFindItemListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 假設我們要取得Integer數值的List</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFindItem</span><span class="params">(ArrayList&lt;Integer&gt; integers)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h2 id="建立Model要傳數值回OnFindItemListener的Interactor"><a href="#建立Model要傳數值回OnFindItemListener的Interactor" class="headerlink" title="建立Model要傳數值回OnFindItemListener的Interactor"></a>建立Model要傳數值回OnFindItemListener的Interactor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FindItemInteractor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFind</span><span class="params">(OnFindItemListener onFindItemListener)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建立我們運算取得數據的方法"><a href="#建立我們運算取得數據的方法" class="headerlink" title="建立我們運算取得數據的方法"></a>建立我們運算取得數據的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindItemInteractorImpl</span> <span class="keyword">implements</span> <span class="title">FindItemInteractor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFind</span><span class="params">(OnFindItemListener onFindItemListener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 回傳ArrayList&lt;Integer&gt;</span></span><br><span class="line">        onFindItemListener.onFindItem(findIntegers()); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArrayList&lt;Integer&gt; <span class="title">findIntegers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            integers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> integers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><h2 id="與Presenter建立溝通，也是獲取數據的功能"><a href="#與Presenter建立溝通，也是獲取數據的功能" class="headerlink" title="與Presenter建立溝通，也是獲取數據的功能"></a>與Presenter建立溝通，也是獲取數據的功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FindItemView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本上跟OnFindItemListener是一樣的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setItem</span><span class="params">(ArrayList&lt;Integer&gt; integers)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h1><h2 id="建立我們主要的Presenter"><a href="#建立我們主要的Presenter" class="headerlink" title="建立我們主要的Presenter"></a>建立我們主要的Presenter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FindItemPresenter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 這邊可以算是命令，當我onStartFind可以做些事</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStartFind</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Presenter應用"><a href="#Presenter應用" class="headerlink" title="Presenter應用"></a>Presenter應用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindItemPresenterImpl</span> <span class="keyword">implements</span> <span class="title">FindItemPresenter</span>, <span class="title">OnFindItemListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FindItemView findItemView;</span><br><span class="line">    <span class="keyword">private</span> FindItemInteractor findItemInteractor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FindItemPresenterImpl</span><span class="params">(FindItemView findItemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.findItemView = findItemView;</span><br><span class="line">        findItemInteractor = <span class="keyword">new</span> FindItemInteractorImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 當onFind啟動時，也代表FindItemInteractorImpl開始運算</span></span><br><span class="line">        findItemInteractor.onFind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFindItem</span><span class="params">(ArrayList&lt;Integer&gt; integers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用View將數據回傳</span></span><br><span class="line">        findItemView.setItem(integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Activity使用Presenter獲取我們想要的數據"><a href="#Activity使用Presenter獲取我們想要的數據" class="headerlink" title="Activity使用Presenter獲取我們想要的數據"></a>Activity使用Presenter獲取我們想要的數據</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">FindItemView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 為了讓我們可以監聽到FindItemView所回傳的數據，所以需要implements FindItemView</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 宣告一個Presenter</span></span><br><span class="line">    <span class="keyword">private</span> FindItemPresenter findItemPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initButton();</span><br><span class="line">        <span class="comment">// new Presenter應用</span></span><br><span class="line">        findItemPresenter = <span class="keyword">new</span> FindItemPresenterImpl(<span class="keyword">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 如上述所說，這可以算是一個命令，Activity請求Presenter使用onStartFind方法。</span></span><br><span class="line">                findItemPresenter.onStartFind(); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當Model完成運算後，會將數據經由Presenter傳回至View</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(ArrayList&lt;Integer&gt; integers)</span> </span>&#123;</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        textView.setText(<span class="string">"Find "</span> + integers.size() + <span class="string">" item."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GitHub-Download"><a href="#GitHub-Download" class="headerlink" title="GitHub Download"></a>GitHub Download</h1><p><a href="https://github.com/Kuan-Wei-Kuo/ExampleMVP" target="_blank" rel="noopener">GitHub</a></p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>這篇文章就到此結束了，對於這些設計模式，我們有時候其實很難抉擇與確實的實現，因此只能說，先把View分出來，在來考慮Model。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. Toolbar與ActionMode的運用</title>
      <link href="/2015/11/19/Android-Toolbar%E8%88%87ActionMode%E7%9A%84%E9%81%8B%E7%94%A8/"/>
      <url>/2015/11/19/Android-Toolbar%E8%88%87ActionMode%E7%9A%84%E9%81%8B%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>我想很多人不知道有這個ActionMode的存在，好啦…我承認之前真的不知道。</p><p>值得高興的是Toolbar也有支援ActionMode，可以讓我們更方便的在特殊時刻切換至想要的Menu。</p><h1 id="接下來就來說明如何應用"><a href="#接下來就來說明如何應用" class="headerlink" title="接下來就來說明如何應用"></a>接下來就來說明如何應用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ActionMode actionMode; <span class="comment">//為了可以對ActionMode做外部的更改</span></span><br><span class="line">Toolbar toolbar = (Toolbar) findViewById(R.i.toolbar);</span><br><span class="line">toolbar.toolbar.startActionMode( <span class="keyword">new</span> ActionMode.Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateActionMode</span><span class="params">(ActionMode mode, Menu menu)</span> </span>&#123;</span><br><span class="line">        actionMode = mode; <span class="comment">//取得目前的ActionMode</span></span><br><span class="line">        mode.getMenuInflater().inflate(R.menu.menu, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPrepareActionMode</span><span class="params">(ActionMode mode, Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//準備</span></span><br><span class="line">        mode.setTitle(<span class="string">"Title"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onActionItemClicked</span><span class="params">(ActionMode mode, MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Menu Item 點擊</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyActionMode</span><span class="params">(ActionMode mode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//當ActionMode移除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其實用法就這麼簡單，但當完成的時候，肯定會發現為什麼沒有覆蓋Toolbar，這時候我們只要加入下面這行：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionModeOverlay"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那麼ActionMode就可以覆蓋在Toolbar上面。</p><h1 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h1><p><img src="/2015/11/19/Android-Toolbar與ActionMode的運用/actionMode_0.png" width="300"></p><h1 id="After"><a href="#After" class="headerlink" title="After"></a>After</h1><p><img src="/2015/11/19/Android-Toolbar與ActionMode的運用/actionMode_1.png" width="300"></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. 關於Handler不可不知道的事</title>
      <link href="/2015/11/17/Android-%E9%97%9C%E6%96%BCHandler%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
      <url>/2015/11/17/Android-%E9%97%9C%E6%96%BCHandler%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>大家都應該都有使用過Handler更新UI的時刻，但我們的使用方法是對的嗎?</p><h1 id="我們通常都會像下面這樣寫"><a href="#我們通常都會像下面這樣寫" class="headerlink" title="我們通常都會像下面這樣寫"></a>我們通常都會像下面這樣寫</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各種關於Handler的教學文章應該都是如此使用吧?</p><p>那麼大家有沒有看過下面這行錯誤警告↓<br>Warn:This Handler class should be static or leaks might occur<br>這句話給的意義其實非常重大，Handler應該是static，否則內存可能洩漏！<br>就讓小魯解釋一下，他這個可恨的東西到底是如何洩漏的呢?</p><p>問題在於Runnable、Thread，我們獲取大量數據時當然會使用這些方法，並且加上msg讓他完成時更新UI，但如果我們將這個Activity(Fragment)註銷掉呢?</p><p>很不幸的，當你應用程式開啟framework也跟著開啟，內部有一個Looper，整個App靠他，如果msg沒有執行前，這些正在執行中的Runnable、Thread將會繼續執行，直至msg被執行，這根本就是驚天動地，令人無法接受，唉聲嘆氣的消耗程式資源!</p><p>但不要吃驚，Romain Guy(Adroid framework engineer)也幫助我們，給我們建議<a href="https://groups.google.com/forum/?fromgroups=#%21msg/android-developers/1aPZXZG6kWk/lIYDavGYn5UJ" target="_blank" rel="noopener">使用方法</a></p><h1 id="就讓咱們繼續看下去…"><a href="#就讓咱們繼續看下去…" class="headerlink" title="就讓咱們繼續看下去…"></a>就讓咱們繼續看下去…</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;OuterClass&gt; mTarget;</span><br><span class="line">                                        </span><br><span class="line">        InnerClass(OuterClass target) &#123;</span><br><span class="line">            mTarget = <span class="keyword">new</span> WeakReference&lt;OuterClass&gt;(target);</span><br><span class="line">        &#125;</span><br><span class="line">                                    </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            OuterClass target = mTarget.get();</span><br><span class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                target.<span class="keyword">do</span>();    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程式碼可以看到一個不常看見的東西叫WeakReference，也是所謂的”弱引用”，小魯在這邊也大概說一下，弱引用就是不能阻擋任何關於回收的動作。</p><h1 id="那麼我們的程式碼將會"><a href="#那麼我們的程式碼將會" class="headerlink" title="那麼我們的程式碼將會"></a>那麼我們的程式碼將會</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MainActivity&gt; mActivity;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OuterHandler</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        MainActivity activity = mActivity.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以其實當我們使用到了handler以及msg，如果我們無法取得想要WeakReference的物件，那麼回收機制也將會直接收走，連一點殘渣也不想留給你，這樣也解決的上述內存洩漏的可能。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1106/1922.html" target="_blank" rel="noopener">泡在網上的日子</a><br><a href="https://groups.google.com/forum/?fromgroups=#%21msg/android-developers/1aPZXZG6kWk/lIYDavGYn5UJ" target="_blank" rel="noopener">Google開發論壇</a><br><a href="http://codex.wiki/post/132087-711" target="_blank" rel="noopener">Java之WeakReference與SoftReference使用講解</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. SeekBar 顏色修改</title>
      <link href="/2015/08/31/Android-SeekBar-%E9%A1%8F%E8%89%B2%E4%BF%AE%E6%94%B9/"/>
      <url>/2015/08/31/Android-SeekBar-%E9%A1%8F%E8%89%B2%E4%BF%AE%E6%94%B9/</url>
      <content type="html"><![CDATA[<p>日前有機會做個顏色選擇器，因此去研究了SeekBar的相關文獻，主要還是使用xml達到修改的目的，如下方所示：</p><h3 id="red-seekbar-progress-xml"><a href="#red-seekbar-progress-xml" class="headerlink" title="red_seekbar_progress.xml"></a>red_seekbar_progress.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/background"</span>&gt;</span></span><br><span class="line">        //SeekBar滾動條的背景</span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:color</span>=<span class="string">"@color/GREY_800"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/progress"</span>&gt;</span></span><br><span class="line">        //SeekBar Progress的顏色</span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:color</span>=<span class="string">"@color/RED_300"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="seekbar-layout-xml"><a href="#seekbar-layout-xml" class="headerlink" title="seekbar_layout.xml"></a>seekbar_layout.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/slideR"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:max</span>=<span class="string">"255"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxHeight</span>=<span class="string">"3dp"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:minHeight</span>=<span class="string">"3dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progressDrawable</span>=<span class="string">"@drawable/red_seekbar_progress"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:thumbTint</span>=<span class="string">"@color/RED_300"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>red_seekbar_progress.xml部分其實也沒有什麼需要探討的，簡單改個顏色與背景罷了，然而在seekbar_layout.xml就需要去注意一些事項：</p><ol><li>記得要設置maxHeight and minHeight否則會看到Progress Background比SeekBar滑動按鈕還要大的情形出現。</li><li>progressDrawable為剛剛所設置的red_seekbar_progress.xml。</li><li>thumbTint其實就是我們SeekBar的滑動按鈕顏色。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android. RecyclerView ItemAnimator 簡單示範</title>
      <link href="/2015/08/08/Android-RecyclerView-ItemAnimator%E7%B0%A1%E5%96%AE%E7%A4%BA%E7%AF%84/"/>
      <url>/2015/08/08/Android-RecyclerView-ItemAnimator%E7%B0%A1%E5%96%AE%E7%A4%BA%E7%AF%84/</url>
      <content type="html"><![CDATA[<p>目前在GitHub找到的資源，內部大多是使用DefaultItemAnimator.java(默認動畫程式碼)，並且做修改，因為它非常的好用，可以為您省去許多時間。</p><p>如果想要使用動畫就像下面那行程式碼就好了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br></pre></td></tr></table></figure></p><p>當然也有可能會是SlideInTop、OvershootInLeft、ScaleIn等等的動畫，但記住，這些都是需要自行製作的。</p><h1 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h1><p><a href="https://youtu.be/3Y9oEKV9h4w" target="_blank" rel="noopener">https://youtu.be/3Y9oEKV9h4w</a><br><a href="https://youtu.be/3Y9oEKV9h4w" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/kaAu9WJ9stE3X9ta0HaUozhLK3QJ57ipXo8_ipKuIjg=w852-h512-no" alt="Video"></a></p><h1 id="Reference-Sources"><a href="#Reference-Sources" class="headerlink" title="Reference Sources"></a>Reference Sources</h1><p><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="noopener">wasabeef/recyclerview-animators</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
